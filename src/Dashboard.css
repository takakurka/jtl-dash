// Full working Dashboard.js with SKU-grouped attribute search
import React, { useState } from 'react';
import './Dashboard.css';

function Dashboard({ data }) {
  const [searchTerm, setSearchTerm] = useState('');
  const [attributeSearchTerm, setAttributeSearchTerm] = useState('');

  const excludedAttributes = [
    'meta_title', 'meta_description', 'meta_keywords', 'barcode_type', 'active', 'product_type'
  ];

  const filteredItems = data.filter((item) => {
    const search = searchTerm.toLowerCase();
    const nameMatch = item.name?.toLowerCase().includes(search);
    const skuMatch = item.sku?.toLowerCase().includes(search);
    return (nameMatch || skuMatch) && !item.sku.endsWith('-0');
  });

  const attributeResults = {};
  data.forEach((item) => {
    if (item.sku.endsWith('-0')) return;
    item.attributes?.forEach((attr) => {
      const key = attr.key?.toLowerCase() || '';
      const value = attr.value?.toLowerCase() || '';
      if (
        (key.includes(attributeSearchTerm.toLowerCase()) ||
         value.includes(attributeSearchTerm.toLowerCase())) &&
        !excludedAttributes.includes(attr.key)
      ) {
        if (!attributeResults[item.sku]) {
          attributeResults[item.sku] = [];
        }
        attributeResults[item.sku].push(attr);
      }
    });
  });

  return (
    <div className="dashboard">
      <h1>JTL Product Dashboard</h1>
      <input
        type="text"
        placeholder="Search by SKU or Item Name..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        className="search-box"
      />

      {filteredItems.map((item, index) => (
        <div key={index} className="product-card">
          <p><strong className="sku">SKU:</strong> <span className="sku-highlight">{item.sku}</span></p>
          <p><strong>Name:</strong> {item.name}</p>
          <table>
            <thead>
              <tr>
                <th>Attribute</th>
                <th>Value</th>
              </tr>
            </thead>
            <tbody>
              {item.attributes?.filter(attr => !excludedAttributes.includes(attr.key)).map((attr, idx) => (
                <tr key={idx}>
                  <td>{attr.key}</td>
                  <td>{attr.value}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      ))}

      <h3>Search by Attribute</h3>
      <input
        type="text"
        placeholder="Search attributes..."
        value={attributeSearchTerm}
        onChange={(e) => setAttributeSearchTerm(e.target.value)}
        className="search-box"
      />

      {attributeSearchTerm && (
        <div className="attribute-results">
          <p><strong>{Object.keys(attributeResults).length} result(s) found:</strong></p>
          {Object.entries(attributeResults).map(([sku, attrs], index) => (
            <div key={index} className="attribute-sku-group">
              <p><strong className="sku">SKU:</strong> <span className="sku-highlight">{sku}</span></p>
              <ul>
                {attrs.map((attr, idx) => (
                  <li key={idx}><strong>Attribute:</strong> {attr.key}<br /><strong>Value:</strong> {attr.value}</li>
                ))}
              </ul>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

export default Dashboard;
